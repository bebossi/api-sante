// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  email      String?   @unique
  name       String?
  password   String?
  addresses  Address[]
  orders     Order[]
  role       String    @default("user")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Address {
  id                String  @id @default(uuid())
  street            String
  neighborhood      String
  street_number     Int
  complement_number Int?
  CEP               Int
  user_id           String
  user              User    @relation(fields: [user_id], references: [id])
  orders            Order[]
}

model Category {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  products Product[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Decimal
  image       String
  category_id String
  category    Category    @relation(fields: [category_id], references: [id])
  order_items OrderItem[]
  toppings    Topping[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Topping {
  id                  String             @id @default(uuid())
  name                String
  description         String
  price               Int
  image               String
  product_id          String
  product             Product            @relation(fields: [product_id], references: [id])
  order_item_toppings OrderItemTopping[]
}

model Order {
  id                       String      @id @default(uuid())
  user_id                  String
  order_items              OrderItem[]
  subTotal                 Decimal
  total                    Decimal
  created_at               DateTime    @default(now())
  address_id               String?
  isPaid                   Boolean     @default(false)
  avaliable_appointment_id String?
  status                   String      @default("Confirmando pagamento")

  avaliable_appointment AvailableAppointment? @relation(fields: [avaliable_appointment_id], references: [id])
  address               Address?              @relation(fields: [address_id], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [user_id], references: [id])
}

model OrderItemTopping {
  id            String @id @default(uuid())
  order_item_id String
  topping_id    String
  quantity      Int

  order_item OrderItem @relation(fields: [order_item_id], references: [id], onDelete: Cascade)
  topping    Topping   @relation(fields: [topping_id], references: [id])
}

model OrderItem {
  id                  String             @id @default(uuid())
  order_id            String
  product_id          String
  quantity            Int
  price               Int
  order_item_toppings OrderItemTopping[]

  product Product @relation(fields: [product_id], references: [id])
  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model AvailableAppointment {
  id          String   @id @default(uuid())
  start_date  DateTime
  end_date    String
  isAvailable Boolean
  orders      Order[]
}

model isRestaurantOpen {
  id           String   @id @default(uuid())
  is_open      Boolean
  updated_date DateTime
}
