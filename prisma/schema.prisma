// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String?   @unique
  name      String?
  password  String?
  addresses Address[]
  cart      Cart?
  orders    Order[]
  role      String    @default("user")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id               String @id @default(uuid())
  street           String
  neighborhood     String
  streetNumber     Int
  complementNumber Int?
  CEP              Int
  userId           String
  user             User   @relation(fields: [userId], references: [id])
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Product {
  id            String           @id @default(uuid())
  name          String
  description   String
  price         Decimal
  image         String
  categoryId    String
  category      Category         @relation(fields: [categoryId], references: [id])
  cartProducts  CartToProduct[]
  orderProducts OrderToProduct[]
  toppings      Topping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topping {
  id                     String                  @id @default(uuid())
  name                   String
  description            String
  price                  Int
  image                  String
  productId              String
  product                Product                 @relation(fields: [productId], references: [id])
  cartToProductToppings  CartToProductTopping[]
  orderToProductToppings OrderToProductTopping[]
}

model CartToProductTopping {
  id           String @id @default(uuid())
  cartToProdId String
  toppingId    String
  quantity     Int

  cartToProduct CartToProduct @relation(fields: [cartToProdId], references: [id], onDelete: Cascade)
  topping       Topping       @relation(fields: [toppingId], references: [id])
}

model OrderToProductTopping {
  id               String @id @default(uuid())
  orderToProductId String
  toppingId        String
  quantity         Int

  orderToProduct OrderToProduct @relation(fields: [orderToProductId], references: [id], onDelete: Cascade)
  topping        Topping        @relation(fields: [toppingId], references: [id])
}

model Order {
  id            String           @id @default(uuid())
  userId        String
  orderProducts OrderToProduct[]
  subTotal      Int
  total         Int
  createdAt     DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Cart {
  id           String          @id @default(uuid())
  userId       String?         @unique
  cartProducts CartToProduct[]
  subtotal     Int
  sessionId    String?         @unique

  user    User?    @relation(fields: [userId], references: [id])
  session Session? @relation(fields: [sessionId], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  data      String?
  expiresAt DateTime
  cart      Cart?
}

model CartToProduct {
  id                    String                 @id @default(uuid())
  cartId                String
  productId             String
  quantity              Int
  price                 Int
  cartToProductToppings CartToProductTopping[]

  product Product @relation(fields: [productId], references: [id])
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model OrderToProduct {
  id                    String                  @id @default(uuid())
  orderId               String
  productId             String
  quantity              Int
  price                 Int
  orderToProductTopping OrderToProductTopping[]

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}
